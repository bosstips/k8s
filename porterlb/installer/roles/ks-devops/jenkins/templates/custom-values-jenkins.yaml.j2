# https://kubernetes-charts.storage.googleapis.com/jenkins-0.19.0.tgz
Master:
  Image: "{{ jenkins_repo }}"
  ImageTag: "{{ jenkins_tag }}"
  ImagePullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "0.1"
      memory: "{{ devops.jenkinsMemoryReq }}"
    limits:
      cpu: "1"
      memory: "{{ devops.jenkinsMemoryLim }}"
  JavaOpts: "{{ JavaOpts }}"
  ServicePort: 80
  ServiceType: NodePort
  NodePort: 30180
  HealthProbes: true

  InitContainerEnv:
    - name: JENKINS_UC_DOWNLOAD
      value: http://uc-jenkins-update-center

  ContainerEnv:
    - name: CASC_JENKINS_CONFIG
      value: /var/jenkins_home/casc_configs/jenkins.yaml
    - name: com.sun.jndi.ldap.connect.timeout
      value: "15000"
    - name: com.sun.jndi.ldap.read.timeout
      value: "60000"
    - name: kubernetes.connection.timeout
      value: "60000"
    - name: kubernetes.request.timeout
      value: "60000"
    - name: EMAIL_SMTP_HOST
      value: "{{ EMAIL_SMTP_HOST }}"
    - name: EMAIL_SMTP_PORT
      value: "{{ EMAIL_SMTP_PORT }}"
    - name: EMAIL_USE_SSL
      value: "{{ EMAIL_USE_SSL }}"
    - name: EMAIL_FROM_NAME
      value: "{{ EMAIL_FROM_NAME }}"
    - name: EMAIL_FROM_ADDR
      value: "{{ EMAIL_FROM_ADDR }}"
    - name: EMAIL_FROM_PASS
      value: "{{ EMAIL_FROM_PASS }}"
{% if sonarQubeHost is defined and sonarQubeToken is defined %}
    - name: SONAR_ENABLED
      value: "true"
    - name: SONAR_RUNNER_VERSION
      value: "3.3.0.1492"
    - name: SONAR_SERVER_URL
      value: "{{ sonarQubeHost }}"
    - name: SONAR_AUTH_TOKEN
      value: "{{ sonarQubeToken }}"
{% endif %}

  InitScripts:
    Mailer: |-
      import jenkins.model.*

      def env = System.getenv()

      def emailFromName = env.EMAIL_FROM_NAME
      def emailFromAddr = env.EMAIL_FROM_ADDR

      def locationConfig = JenkinsLocationConfiguration.get()
      locationConfig.adminAddress = "${emailFromName} <${emailFromAddr}>"
      locationConfig.save()

      def mailer = Jenkins.instance.getDescriptor("hudson.tasks.Mailer")
      mailer.setSmtpAuth(emailFromAddr, env.EMAIL_FROM_PASS)
      mailer.setReplyToAddress("no-reply@k8s.kubesphere.io")
      mailer.setSmtpHost(env.EMAIL_SMTP_HOST)
      mailer.setUseSsl(env.EMAIL_USE_SSL.toBoolean())
      mailer.setSmtpPort(env.EMAIL_SMTP_PORT)
      mailer.save()

    K8sCredentials: |-
      import com.cloudbees.plugins.credentials.CredentialsScope
      import com.cloudbees.plugins.credentials.SystemCredentialsProvider
      import com.cloudbees.plugins.credentials.domains.Domain
      import org.csanchez.jenkins.plugins.kubernetes.ServiceAccountCredential

      def addKubeCredential(String credentialId) {
        def kubeCredential = new ServiceAccountCredential(CredentialsScope.GLOBAL, credentialId, 'Kubernetes service account')
        SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), kubeCredential)
      }

      addKubeCredential('k8s-service-account')
    RBAC: |-
      import hudson.*
      import hudson.model.*
      import hudson.security.*
      import jenkins.*
      import jenkins.model.*
      import java.util.*
      import com.michelin.cio.hudson.plugins.rolestrategy.*
      import java.lang.reflect.*
      import com.synopsys.arc.jenkins.plugins.rolestrategy.*

      def env = System.getenv()

      // Roles
      def globalRoleRead = "kubesphere-user"
      def globalRoleAdmin = "admin"
      def ldapUserNameAdmin = "admin"

      def jenkinsInstance = Jenkins.getInstance()
      def currentAuthenticationStrategy = Hudson.instance.getAuthorizationStrategy()
      if (currentAuthenticationStrategy instanceof RoleBasedAuthorizationStrategy) {
        println "Role based authorisation already enabled."
        println "Exiting script..."
        return
      } else {
          println "Enabling role based authorisation strategy..."
      }

      // Set new authentication strategy
      RoleBasedAuthorizationStrategy roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()
      jenkinsInstance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)

      Constructor[] constrs = Role.class.getConstructors();
      for (Constructor<?> c : constrs) {
          c.setAccessible(true);
      }

      // Make the method assignRole accessible
      Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", RoleType.class, Role.class, String.class);
      assignRoleMethod.setAccessible(true);

      // Create admin set of permissions
      Set<Permission> adminPermissions = new HashSet<Permission>();
      adminPermissions.add(Permission.fromId("hudson.model.View.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Connect"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.UploadPlugins"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Configure"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.ConfigureUpdateCenter"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Build"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Configure"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.Administer"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Cancel"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Read"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.View"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Build"));
      adminPermissions.add(Permission.fromId("hudson.scm.SCM.Tag"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Discover"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Update"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Move"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Workspace"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Read"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.RunScripts"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Configure"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Disconnect"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Update"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Replay"));

      // Create the admin Role
      Role adminRole = new Role(globalRoleAdmin, adminPermissions);
      roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);

      // Assign the role
      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, ldapUserNameAdmin);
      println "Admin role created...OK"

      /// Read access for authenticated users
      // Create permissions
      Set<Permission> authenticatedPermissions = new HashSet<Permission>();
      authenticatedPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));

      Role authenticatedRole = new Role(globalRoleRead, authenticatedPermissions);
      roleBasedAuthenticationStrategy.addRole(RoleType.Global, authenticatedRole);

      // Assign the role
      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, authenticatedRole, 'authenticated');
      println "Read role created...OK"

      // Save the state
      println "Saving changes."
      jenkinsInstance.save()

    Sonarqube: |-
      import hudson.model.*
      import jenkins.model.*
      import hudson.plugins.sonar.*
      import hudson.plugins.sonar.model.TriggersConfig
      import hudson.tools.*


      def env = System.getenv()
      def instance = Jenkins.getInstance()
      // Check sonarqube enable
      if (env['SONAR_ENABLED'] == null || !env['SONAR_ENABLED'].toBoolean()) {
          println "--> SonarQube Disabled"
          return
      }

      def sonar_server_url = env['SONAR_SERVER_URL']
      def sonar_auth_token = env['SONAR_AUTH_TOKEN']
      def sonar_plugin_version = env['SONAR_PLUGIN_VERSION']
      def sonar_additional_props = env['SONAR_ADDITIONAL_PROPS']


      def SonarGlobalConfiguration sonar_conf = instance.getDescriptor(SonarGlobalConfiguration.class)

      def sonar_inst = new SonarInstallation(
              "sonar", // Name
              sonar_server_url,
              sonar_auth_token,
              sonar_plugin_version,
              sonar_additional_props,
              new TriggersConfig(),
              "" // Additional Analysis Properties
      )

      def sonar_installations = sonar_conf.getInstallations()
      def sonar_inst_exists = false
      def sonar_exists_index = 0
      sonar_installations.eachWithIndex {
          it, index ->
          installation = (SonarInstallation) it
          if (sonar_inst.getName() == installation.getName()) {
            sonar_inst_exists = true
            sonar_exists_index = index
            println("Found existing installation: " + installation.getName() + " : " +index)
          }
      }

      if (sonar_inst_exists) {
          sonar_installations[sonar_exists_index] = sonar_inst
          sonar_conf.setInstallations((SonarInstallation[]) sonar_installations)
          sonar_conf.save()
      }else{
          sonar_installations += sonar_inst
          sonar_conf.setInstallations((SonarInstallation[]) sonar_installations)
          sonar_conf.save()
      }


      def sonar_runner_version = env['SONAR_RUNNER_VERSION']

      println "--> Configuring SonarRunner"
      def desc_SonarRunnerInst = instance.getDescriptor("hudson.plugins.sonar.SonarRunnerInstallation")

      def sonarRunnerInstaller = new ZipExtractionInstaller('',"http://uc-jenkins-update-center/sonar-scanner-cli/sonar-scanner-cli-"+sonar_runner_version+".zip","sonar-scanner-"+sonar_runner_version)
      def installSourceProperty = new InstallSourceProperty([sonarRunnerInstaller])
      def sonarRunner_inst = new SonarRunnerInstallation("sonar", "", [installSourceProperty])

      def sonar_runner_installations = desc_SonarRunnerInst.getInstallations()
      def sonar_runner_inst_exists = false
      def sonar_runner_exists_index = 0
      sonar_runner_installations.eachWithIndex {
          it, index ->
          installation = (SonarRunnerInstallation) it
          if (sonarRunner_inst.getName() == installation.getName()) {
              sonar_runner_inst_exists = true
              sonar_runner_exists_index = index
              println("Found existing installation: " + installation.getName())
          }
      }

      if (sonar_runner_inst_exists) {
          sonar_runner_installations[sonar_runner_exists_index] = sonarRunner_inst
          desc_SonarRunnerInst.setInstallations((SonarRunnerInstallation[]) sonar_runner_installations)
          desc_SonarRunnerInst.save()
      } else{
          sonar_runner_installations += sonarRunner_inst
          desc_SonarRunnerInst.setInstallations((SonarRunnerInstallation[]) sonar_runner_installations)
          desc_SonarRunnerInst.save()
      }

      // Save the state
      instance.save()


# Ingress:
#   Annotations:
#     nginx.ingress.kubernetes.io/ssl-redirect: "false"
#     nginx.ingress.kubernetes.io/proxy-body-size: 50m
#     nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
#     ingress.kubernetes.io/ssl-redirect: "false"
#     ingress.kubernetes.io/proxy-body-size: 50m
#     ingress.kubernetes.io/proxy-request-buffering: "off"
HostName: jenkins.k8s.kubesphere.io

rbac:
  install: true

Persistence:
  Enabled: true
{% if persistence.storageClass is defined and persistence.storageClass != "" %}
  StorageClass: "{{ persistence.storageClass }}"
{% endif %}
  AccessMode: ReadWriteOnce
  Size: {% if jenkins_pv_size is defined %}{{ jenkins_pv_size }}{% else %}{{ devops.jenkinsVolumeSize }}{% endif %}
  
  volumes:
  - name: casc-config
    configMap:
      name: jenkins-casc-config
  mounts:
  - name: casc-config
    mountPath: /var/jenkins_home/casc_configs
    readOnly: true

Agent:
  Image: {{ jnlp_slave_repo }}
  ImageTag: {{ jnlp_slave_tag }}
